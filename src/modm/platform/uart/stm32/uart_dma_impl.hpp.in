/*
 * Copyright (c) 2009, Martin Rosekeit
 * Copyright (c) 2009-2011, Fabian Greif
 * Copyright (c) 2010-2011, 2013, Georgi Grinshpun
 * Copyright (c) 2013-2014, Sascha Schade
 * Copyright (c) 2013, 2016, Kevin Läufer
 * Copyright (c) 2013-2017, Niklas Hauser
 * Copyright (c) 2018, Lucas Mösch
 * Copyright (c) 2021, Raphael Lehmann
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------
#pragma once

#include "../device.hpp"

template<typename DmaChannelRx, typename DmaChannelTx>
void
{{ name }}_dma<DmaChannelRx, DmaChannelTx>::writeBlocking(uint8_t data)
{
	while(!{{ hal }}::isTransmitRegisterEmpty());
	{{ hal }}::write(data);
}

template<typename DmaChannelRx, typename DmaChannelTx>
void
{{ name }}_dma<DmaChannelRx, DmaChannelTx>::writeBlocking(const uint8_t *data, std::size_t length)
{
	while (length-- != 0) {
		writeBlocking(*data++);
	}
}

template<typename DmaChannelRx, typename DmaChannelTx>
void
{{ name }}_dma<DmaChannelRx, DmaChannelTx>::flushWriteBuffer()
{
%% if options["buffer.tx"]
	while(!isWriteFinished());
%% else
	return;
%% endif
}

template<typename DmaChannelRx, typename DmaChannelTx>
bool
{{ name }}_dma<DmaChannelRx, DmaChannelTx>::write(uint8_t data)
{
%% if options["buffer.tx"]
	if({{ name }}txBuffer.isEmpty() && {{ hal }}::isTransmitRegisterEmpty()) {
		{{ hal }}::write(data);
	} else {
		if (!{{ name }}txBuffer.push(data))
			return false;
		// Disable interrupts while enabling the transmit interrupt
		atomic::Lock lock;
		// Transmit Data Register Empty Interrupt Enable
		{{ hal }}::enableInterrupt(Interrupt::TxEmpty);
	}
	return true;
%% else
	if({{ hal }}::isTransmitRegisterEmpty()) {
		{{ hal }}::write(data);
		return true;
	} else {
		return false;
	}
%% endif
}

template<typename DmaChannelRx, typename DmaChannelTx>
std::size_t
{{ name }}_dma<DmaChannelRx, DmaChannelTx>::write(const uint8_t *data, std::size_t length)
{
%% if options["buffer.tx"]
	bool copied = {{ name }}txBuffer.copy(data, length);
	if(!copied){
		return 0;
	}
	if({{ hal }}::isTransmitRegisterEmpty()) {
		// Disable interrupts while enabling the transmit interrupt
		atomic::Lock lock;
		// Transmit Data Register Empty Interrupt Enable
		{{ hal }}::enableInterrupt(Interrupt::TxEmpty);
	}
	return length;
%% else
	uint32_t i = 0;
	for (; i < length; ++i)
	{
		if (!write(*data++)) {
			return i;
		}
	}
	return i;
%% endif
}

template<typename DmaChannelRx, typename DmaChannelTx>
bool
{{ name }}_dma<DmaChannelRx, DmaChannelTx>::isWriteFinished()
{
%% if options["buffer.tx"]
	return {{ name }}txBuffer.isEmpty() && {{ hal }}::isTransmitRegisterEmpty();
%% else
	return {{ hal }}::isTransmitRegisterEmpty();
%% endif
}

template<typename DmaChannelRx, typename DmaChannelTx>
std::size_t
{{ name }}_dma<DmaChannelRx, DmaChannelTx>::transmitBufferSize()
{
%% if options["buffer.tx"]
	return {{ name }}txBuffer.getSize();
%% else
	return {{ hal }}::isTransmitRegisterEmpty() ? 0 : 1;
%% endif
}

template<typename DmaChannelRx, typename DmaChannelTx>
std::size_t
{{ name }}_dma<DmaChannelRx, DmaChannelTx>::discardTransmitBuffer()
{
%% if options["buffer.tx"]
	std::size_t count = 0;
	// disable interrupt since buffer will be cleared
	{{ hal }}::disableInterrupt({{ hal }}::Interrupt::TxEmpty);
	while(!{{ name }}txBuffer.isEmpty()) {
		++count;
		{{ name }}txBuffer.pop();
	}
	return count;
%% else
	return 0;
%% endif
}

template<typename DmaChannelRx, typename DmaChannelTx>
bool
{{ name }}_dma<DmaChannelRx, DmaChannelTx>::read(uint8_t &data)
{
	return read(&data, 1) > 0;
}

template<typename DmaChannelRx, typename DmaChannelTx>
std::size_t
{{ name }}_dma<DmaChannelRx, DmaChannelTx>::read(uint8_t *data, std::size_t length)
{
	return {{ name }}rxBuffer.read(data, length);
}

template<typename DmaChannelRx, typename DmaChannelTx>
bool
{{ name }}_dma<DmaChannelRx, DmaChannelTx>::hasError()
{
	return {{ hal }}::getInterruptFlags().any(
		{{ hal }}::InterruptFlag::ParityError |
#ifdef USART_ISR_NE
		{{ hal }}::InterruptFlag::NoiseError |
#endif
		{{ hal }}::InterruptFlag::OverrunError | {{ hal }}::InterruptFlag::FramingError);
}

template<typename DmaChannelRx, typename DmaChannelTx>
void
{{ name }}_dma<DmaChannelRx, DmaChannelTx>::clearError()
{
	return {{ hal }}::acknowledgeInterruptFlags(
		{{ hal }}::InterruptFlag::ParityError |
#ifdef USART_ISR_NE
		{{ hal }}::InterruptFlag::NoiseError |
#endif
		{{ hal }}::InterruptFlag::OverrunError | {{ hal }}::InterruptFlag::FramingError);
}

%% if buffered
%% if name in shared_irqs.keys()
void
modm::platform::{{ name }}_dma<DmaChannelRx, DmaChannelTx>::irq()
%% else
MODM_ISR({{ name | upper }})
%% endif
{
	using namespace modm::platform;

	auto irq { {{ hal }}::getInterruptFlags() };
	if(irq & ({{ hal }}::InterruptFlag::Idle)){
		// idle interrupt flag set
		if({{ name }}DataReceivedCallback.is_valid()){
			if({{ name }}_get_dma_channel_ndtr.is_valid()){
				auto dmaBytesLeftInBuf = {{ name }}_get_dma_channel_ndtr();
				size_t r = {{ name }}rxBuffer.getReadIndex();
				size_t w = {{ name }}rxBuffer.maxSize() - dmaBytesLeftInBuf;
				size_t bytesWritten = 0;
				if(w < r){
					bytesWritten = {{ name }}rxBuffer.maxSize() - r + w;
				}
				else{
					bytesWritten = w - r;
				}
				{{ name }}DataReceivedCallback({{ name }}rxBuffer, bytesWritten);
			}
		}
		{{ hal }}::acknowledgeInterruptFlags({{ hal }}::InterruptFlag::Idle);
	}

%% if options["buffer.tx"]
	if ({{ hal }}::isTransmitRegisterEmpty()) {
		if ({{ name }}txBuffer.isEmpty()) {
			// transmission finished, disable TxEmpty interrupt
			{{ hal }}::disableInterrupt({{ hal }}::Interrupt::TxEmpty);
		}
		else {
			{{ hal }}::write({{ name }}txBuffer.get());
			{{ name }}txBuffer.pop();
		}
	}
%% endif
	{{ hal }}::acknowledgeInterruptFlags({{ hal }}::InterruptFlag::OverrunError);
}
%% endif
